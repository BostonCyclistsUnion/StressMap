# Bike Lanes - is_bike_lane()
b1: # Fix Speed
  LTS: 1
  rule_message: LTS is 1 because there is parking present, the maxspeed is less than
    or equal to 40, highway="residential", and there are 2 lanes or less.
  simple_message: bike lane w/ parking, $\leq$ 40 km/h, highway $=$ "residential",
    $\leq$ 2 lanes
b2:
  LTS: 3
  rule_message: Increasing LTS to 3 because there are 3 or more lanes and parking
    present.
  simple_message: bike lane w/ parking, 3 or more lanes
b3:
  LTS: 3
  rule_message: Increasing LTS to 3 because the bike lane width is less than 4.1m
    and parking present.
  simple_message: bike lane width $<$ 4.1m, parking
b4:
  LTS: 2
  rule_message: Increasing LTS to 2 because the bike lane width is less than 4.25m
    and parking present.
  simple_message: bike lane width $<$ 4.25m, parking
b5: # Fix Speed
  LTS: 2
  rule_message: Increasing LTS to 2 because the bike lane width is less than 4.5m,
    maxspeed is less than 40 on a residential street and parking present.
  simple_message: bike lane width $<$ 4.5m, $\leq$ 40 km/h, residential, parking
b6: # Fix Speed
  LTS: 2
  rule_message: Increasing LTS to 2 because the maxspeed is between 41-50 km/h and
    parking present.
  simple_message: bike lane w/ parking, speed 41-50 km/h
b7: # Fix Speed
  LTS: 3
  rule_message: Increasing LTS to 3 because the maxspeed is between 51-54 km/h and
    parking present.
  simple_message: bike lane w/ parking, speed 51-54 km/h
b8: # Fix Speed
  LTS: 4
  rule_message: Increasing LTS to 4 because the maxspeed is over 55 km/h and parking
    present.
  simple_message: bike lane w/ parking, speed $>$ 55 km/h
b9:
  LTS: 3
  rule_message: Increasing LTS to 3 because highway is not 'residential'.
  simple_message: bike lane w/ parking, highway $\neq$ "residential"

# Bike lanes with no parking - bike_lane_analysis_no_parking()
c1: # Fix Speed
  LTS: 1
  rule_message: LTS is 1 because there is no parking, maxspeed is less than or equal
    to 50, highway='residential', and there are 2 lanes or less.
  simple_message: bike lane no parking, $\leq$ 50 km/h, highway $=$ "residential",
    $\leq$ 2 lanes
c3: # Fix Speed
  LTS: 3
  condition: (lanes_assumed >= 3) & (maxspeed_assumed <= @ref['s5'][unit])
  rule_message: Increasing LTS to 3 because there are 3 or more lanes and no parking.
  simple_message: bike lane no parking, $\leq$ 65 km/h, $\geq$ 3 lanes
c4:
  LTS: 2
  condition: #(gdf_edges[['width']].map(lambda x: isinstance(x, float))['width']) & (gdf_edges['width'] <= ref['w1'][unit])
  rule_message: Increasing LTS to 2 because the bike lane width is less than 1.7 metres
    and no parking.
  simple_message: bike lane width $<$ 1.7m, no parking
c5: # Fix Speed
  LTS: 3
  condition: (maxspeed_assumed > @ref['s3'][unit]) & (maxspeed_assumed <= @ref['s5'][unit])
  rule_message: Increasing LTS to 3 because the maxspeed is between 51-64 km/h and
    no parking.
  simple_message: bike lane no parking, speed 51-64 km/h
c6: # Fix Speed
  LTS: 4
  condition: maxspeed_assumed > @ref['s5'][unit]
  rule_message: Increasing LTS to 4 because the maxspeed is over 65 km/h and no parking.
  simple_message: bike lane no parking, speed $>$ 65 km/h
c7:
  LTS: 3
  condition: highway != 'residential'
  rule_message: Increasing LTS to 3 because highway with bike lane is not 'residential'
    and no parking.
  simple_message: bike lane no parking, highway $\neq$ "residential"

# Mixed Traffic - mixed_traffic()
m2:
  LTS: 2
  condition: highway == 'service' & service == 'alley'
  rule_message: Setting LTS to 2 because highway='service' and service='alley'.
  simple_message: mixed traffic, highway $=$ "service", service $=$ "alley"
m3: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s3'][unit] & highway == 'service' & service == 'parking_aisle'
  rule_message: Setting LTS to 2 because maxspeed is 50 km/h or less and service is
    'parking_aisle'.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, service $=$ "parking_aisle"
m4: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s3'][unit] & highway == 'service' & service == 'driveway'
  rule_message: Setting LTS to 2 because maxspeed is 50 km/h or less and service is
    'driveway'.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, service $=$ "driveway"
m5: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s2'][unit] & lanes_assumed <= 3 & highway == 'residential'
  rule_message: Setting LTS to 2 because maxspeed is up to 40 km/h, 3 or fewer lanes
    and highway='residential'.
  simple_message: mixed traffic, speed $\leq$ 40 km/h, highway $=$ "residential",
    $\leq$ 3 lanes
m6: # Fix Speed
  LTS: 3
  condition: maxspeed_assumed <= @ref['s2'][unit] & lanes_assumed <= 3
  rule_message: Setting LTS to 3 because maxspeed is up to 40 km/h and 3 or fewer
    lanes on non-residential highway.
  simple_message: mixed traffic, speed $\leq$ 40 km/h, highway $\neq$ "residential",
    $\leq$ 3 lanes
m7: # Fix Speed
  LTS: 3
  condition: maxspeed_assumed <= @ref['s2'][unit] & lanes_assumed <= 5
  rule_message: Setting LTS to 3 because maxspeed is up to 40 km/h and 4 or 5 lanes.
  simple_message: mixed traffic, speed $\leq$ 40 km/h, 4 or 5 lanes
m8: # Fix Speed
  LTS: 4
  condition: maxspeed_assumed <= @ref['s2'][unit] & lanes_assumed > 5
  rule_message: Setting LTS to 4 because maxspeed is up to 40 km/h and the number
    of lanes is greater than 5.
  simple_message: mixed traffic, speed $\leq$ 40 km/h, lanes $>$ 5
m9: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s3'][unit] & lanes_assumed < 3 & highway == 'residential'
  rule_message: Setting LTS to 2 because maxspeed is up to 50 km/h and lanes are 2
    or less and highway='residential'.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, highway $=$ "residential",$\leq$
    2 lanes
m10: # Fix Speed
  LTS: 3
  condition: maxspeed_assumed <= @ref['s3'][unit] & lanes_assumed <= 3
  rule_message: Setting LTS to 3 because maxspeed is up to 50 km/h and lanes are 3
    or less on non-residential highway.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, highway $\neq$ "residential",
    $\leq$ 3 lanes
m11: # Fix Speed
  LTS: 4
  condition: maxspeed_assumed <= @ref['s3'][unit] & lanes_assumed > 3
  rule_message: Setting LTS to 4 because the number of lanes is greater than 3.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, lanes $>$ 3
m12: # Fix Speed
  LTS: 4
  condition: maxspeed_assumed > @ref['s3'][unit]
  rule_message: Setting LTS to 4 because maxspeed is greater than 50 km/h.
  simple_message: mixed traffic, speed $>$ 50 km/h
m13:
  LTS: 1
  condition: highway = 'pedestrian'
  rule_message: Setting LTS to 1 because highway='pedestrian'.
  simple_message: mixed traffic, highway $=$ "pedestrian"
m14:
  LTS: 2
  condition: highway = 'footway' & footway == 'crossing'
  rule_message: Setting LTS to 2 because highway='footway' and footway='crossing'.
  simple_message: mixed traffic, highway $=$ "footway", footway $=$ "crossing"
m15:
  LTS: 2
  condition: highway == 'track'
  rule_message: Setting LTS to 2 because highway='track'.
  simple_message: mixed traffic, highway $=$ "track"
m16: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s1'][unit] & highway == 'service'
  rule_message: Setting LTS to 2 because maxspeed is less than 35 km/h and highway='service'.
  simple_message: mixed traffic, speed $\leq$ 35 km/h, highway $=$ "service"
m17:
  LTS: 1
  condition: motor_vehicle == 'no'
  rule_message: Setting LTS to 1 because motor_vehicle='no'.
  simple_message: mixed traffic, motor_vehicle $=$ "no"

# Biking Permitted Rules - biking_permitted()
p1:
  LTS: 0
  condition: bicycle == 'dismount'
  rule_message: Cycling not permitted due to bicycle='dismount' tag.
  simple_message: bicycle $=$ "dismount"
p2:
  LTS: 0
  condition: bicycle == 'no'
  rule_message: Cycling not permitted due to bicycle='no' tag.
  simple_message: bicycle $=$ "no"
p3:
  LTS: 0
  condition: highway == 'motorway'
  rule_message: Cycling not permitted due to highway='motorway' tag.
  simple_message: highway $=$ "motorway"
p4:
  LTS: 0
  condition: highway == 'motorway_link'
  rule_message: Cycling not permitted due to highway='motorway_link' tag.
  simple_message: highway $=$ "motorway_link"
p5: # Complex condition, should split?
  LTS: 0
  condition: footway == 'sidewalk' & ~(bicycle == 'yes') & (highway == 'footway' | highway == 'path')
  rule_message: Cycling not permitted. When footway="sidewalk" is present, there must
    be a bicycle="yes" when the highway is "footway" or "path".
  simple_message: footway $=$ "sidewalk", bicycle$\neq$"yes"
p6:
  LTS: 0
  condition: access == 'no'
  rule_message: Cycling not permitted due to access='no' tag.
  simple_message: access $=$ "no"
p7:
  LTS: 0
  condition: highway == 'proposed'
  rule_message: Cycling not permitted due to highway='proposed' tag.
  simple_message: highway $=$ "proposed"

# Separated Paths - is_separated_path()
s1:
  LTS: 1
  condition: highway == 'path'
  rule_message: This way is a separated path because highway='path'.
  simple_message: highway $=$" path"
s2:
  LTS: 1
  condition: highway == 'footway' & ~(footway== 'crossing')
  rule_message: This way is a separated path because highway='footway' but it is not
    a crossing.
  simple_message: separated, highway $=$" footway", not a crossing
s3:
  LTS: 1
  condition: highway == 'cycleway'
  highway: cycleway
  rule_message: This way is a separated path because highway='cycleway'.
  simple_message: highway $=$ "cycleway"
s9:
  LTS: 1
  condition: (`cycleway:both` == 'track') | (`cycleway:both` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s10:
  LTS: 1
  condition: (`cycleway:both:lane` == 'track') | (`cycleway:both:lane` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s11:
  LTS: 1
  condition: (`cycleway` == 'track') | (`cycleway` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s12:
  LTS: 1
  condition: (`cycleway:right` == 'track') | (`cycleway:right` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s13:
  LTS: 1
  condition: (`cycleway:right:lane` == 'track') | (`cycleway:right:lane` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s14:
  LTS: 1
  condition: (`cycleway:left` == 'track') | (`cycleway:left` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s15:
  LTS: 1
  condition: (`cycleway:left:lane` == 'track') | (`cycleway:left:lane` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s16:
  LTS: 1
  condition: (`cycleway:lanes:backward` == 'track') | (`cycleway:lanes:backward` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s17:
  LTS: 1
  condition: (`cycleway:left:oneway` == 'track') | (`cycleway:left:oneway` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s18:
  LTS: 1
  condition: (`cycleway:left:separation` == 'track') | (`cycleway:left:separation` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s19:
  LTS: 1
  condition: (`cycleway:right:separation` == 'track') | (`cycleway:right:separation` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"
s20:
  LTS: 1
  condition: (`cycleway:right:oneway` == 'track') | (`cycleway:right:oneway` == 'opposite_track')
  rule_message: This way is a separated path because cycleway is defined as 'track'.
  simple_message: cycleway* $=$ "track"