# Bike Lanes - is_bike_lane()
bike_lane_exist1:
  condition: (`cycleway` == 'lane')
  bike_lane_exist: 'yes'
  rule_message: Bike lane because cycleway='lane'
bike_lane_exist3:
  condition: (`cycleway:[right]` != 'yes') & (`cycleway:left` == 'lane') & (`oneway` == True) & (`cycleway:left:oneway` != '-1')
  bike_lane_exist: 'yes'
  rule_message: Left side bikelane
bike_lane_exist4:
  condition: (`cycleway:right` != 'yes') & (`cycleway:[left]` == 'lane') & (`oneway` == True) & (`cycleway:left:oneway` != '-1')
  bike_lane_exist: 'no'
  rule_message: No contraflow lane
bike_lane_exist5:
  condition: (`cycleway:[right]` != 'yes') & (`cycleway:left` == 'track') & (`oneway` == True) & (`cycleway:left:oneway` != '-1')
  bike_lane_exist: 'yes'
  rule_message: Left side bikelane
bike_lane_exist6:
  condition: (`cycleway:right` != 'yes') & (`cycleway:[left]` == 'track') & (`oneway` == True) & (`cycleway:left:oneway` != '-1')
  bike_lane_exist: 'no'
  rule_message: No contraflow lane

bike_lane_exist10:
  condition: (`cycleway:[both,left,right]` == 'lane')
  bike_lane_exist: 'yes'
  rule_message: Bike lane because cycleway:*='lane'
bike_lane_exist12:
  condition: (`cycleway:[both,left,right]` == 'no')
  bike_lane_exist: 'no'
  rule_message: No bike lane because cycleway:*='no'
bike_lane_exist14:
  condition: (`cycleway:[both,left,right]` == 'separate')
  bike_lane_exist: 'no'
  rule_message: Bike lane displayed separately
# bike_lane_exist5:
#   condition: (`shoulder:access:bicycle` == 'lane')
#   bike_lane_exist: 'yes'
#   rule_message: Bike lane because 'shoulder:access:bicycle'='yes'.



# Biking Permitted Rules - biking_permitted()
biking_permitted1:
  LTS: 0
  condition: (oneway == True) & (`cycleway:[left]` == 'no')
  biking_permitted: 'no'
  rule_message: No contraflow lane
biking_permitted2:
  LTS: 0
  condition: (oneway == True) & (`cycleway:[left]` != 'yes')
  biking_permitted: 'no'
  rule_message: Assumed
biking_permitted4:
  LTS: 0
  condition: (`bicycle` == 'dismount')
  biking_permitted: 'no' # FUTURE classify dismount separately to include in some analyses specially
  rule_message: Cyclists must dismount
biking_permitted6:
  LTS: 0
  condition: (`bicycle` == 'no')
  biking_permitted: 'no'
  rule_message: Cycling explicitly excluded
biking_permitted8:
  condition: (`bicycle` == 'yes')
  biking_permitted: 'yes'
  rule_message: Cycling explicitly allowed
biking_permitted10:
  LTS: 0
  condition: (`highway` == 'motorway')
  biking_permitted: 'no'
  rule_message: "Assumed"
biking_permitted12:
  LTS: 0
  condition: (`highway` == 'motorway_link')
  biking_permitted: 'no'
  rule_message: "Assumed"
biking_permitted14:
  LTS: 0
  condition: (`access` == 'no')
  biking_permitted: 'no'
  rule_message: No access
biking_permitted16:
  LTS: 0
  condition: (`highway` == 'proposed')
  biking_permitted: 'no'
  rule_message: "Assumed"
biking_permitted18:
  LTS: 0
  condition: (`footway` == 'sidewalk') & (`bicycle` != 'yes') & (`highway` == 'footway')
  biking_permitted: 'no'
  rule_message: Cycling not permitted. When footway="sidewalk" is present, there must be a bicycle="yes" when the highway is "footway"
biking_permitted20:
  LTS: 0
  condition: (`footway` == 'sidewalk') & (`bicycle` != 'yes') & (`highway` == 'path')
  biking_permitted: 'no'
  rule_message: Cycling not permitted. When footway="sidewalk" is present, there must be a bicycle="yes" when the highway is "path".
biking_permitted21:
  LTS: 0
  condition: (`footway` == 'crossing') & (`bicycle` != 'yes') & (`highway` == 'footway')
  biking_permitted: 'no'
  rule_message: Don't include crossings where bikes aren't explicitly allowed
biking_permitted22:
  LTS: 0
  condition: (`crossing` == 'informal') & (`bicycle` != 'yes') & (`highway` == 'footway')
  biking_permitted: 'no'
  rule_message: Don't include crossings where bikes aren't explicitly allowed
biking_permitted23:
  LTS: 0
  condition: (`highway` == 'footway') & (`footway` == 'access_aisle') & (`bicycle` != 'yes')
  biking_permitted: 'no'
  rule_message: Bicycle must be yes on an access aisle footway
biking_permitted24:
  LTS: 1
  condition: (`highway` == 'footway') & (`footway` == 'access_aisle') & (`bicycle` == 'yes')
  biking_permitted: 'no'
  rule_message: Footway are low stress
biking_permitted26:
  LTS: 2
  condition: (highway == 'service') & (service == 'alley')
  biking_permitted: 'yes'
  rule_message: Service alley
biking_permitted28:
  LTS: 2
  condition: (highway == 'service') & (service == 'driveway')
  biking_permitted: 'yes'
  rule_message: Driveway
biking_permitted30:
  LTS: 2
  condition: (highway == 'service')
  biking_permitted: 'yes'
  rule_message: Service road
biking_permitted32:
  LTS: 0
  condition: (`tunnel` == 'yes') & (`bicycle` != 'yes')
  biking_permitted: 'no'
  rule_message: No biking in tunnels
biking_permitted34:
  LTS: 0
  condition: (`tunnel` == 'building_passage') & (`bicycle` != 'yes')
  biking_permitted: 'no'
  rule_message: No biking in tunnels
biking_permitted36:
  LTS: 0
  condition: (`highway` == 'footway') & (`foot` == 'private') & (`bicycle` != 'yes')
  biking_permitted: 'no'
  rule_message: No biking on private footways
biking_permitted38:
  LTS: 0
  condition: (`bus` == 'designated') & (`bicycle` != 'yes')
  biking_permitted: 'no'
  rule_message: No biking on busways
# biking_permitted:
#   LTS: 2
#   condition: highway = 'footway' & footway == 'crossing'
#   rule_message: Setting LTS to 2 because highway='footway' and footway='crossing'.

# biking_permitted:
#   LTS: 2
#   condition: highway == 'track'
#   rule_message: Setting LTS to 2 because highway='track'.

# Moved from mixed_traffic
# biking_permitted:
#   LTS: 1
#   condition: highway = 'pedestrian'
#   rule_message: Setting LTS to 1 because highway='pedestrian'.
# biking_permitted:
#   LTS: 1
#   condition: motor_vehicle == 'no'
#   rule_message: Setting LTS to 1 because motor_vehicle='no'.

# Separated Paths - is_separated_path()
bike_lane_separation1:
  LTS: 1
  condition: highway == 'cycleway'
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='cycleway'
bike_lane_separation2:
  LTS: 1
  condition: highway == 'path'
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='path'
bike_lane_separation3:
  LTS: 1
  condition: highway == 'footway' & ~(footway== 'crossing')
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='footway' but isn't a crossing
bike_lane_separation4:
  LTS: 1
  condition: (`cycleway` == 'track')
  bike_lane_separation: 'yes'
  rule_message: Separated path because cycleway='track'
bike_lane_separation10:
  condition: (`cycleway:[right]` != 'yes') & (`cycleway:left` == 'lane') & (`oneway` == True) & (`cycleway:left:oneway` != '-1')
  bike_lane_separation: 'no'
  rule_message: Left side bikelane
bike_lane_separation11:
  condition: (`cycleway:right` != 'yes') & (`cycleway:[left]` == 'lane') & (`oneway` == True) & (`cycleway:left:oneway` != '-1')
  bike_lane_separation: 'no'
  rule_message: No contraflow lane
bike_lane_separation12:
  LTS: 1
  condition: (`cycleway:[right]` != 'yes') & (`cycleway:left` == 'track') & (`oneway` == True) & (`cycleway:left:oneway` != '-1')
  bike_lane_separation: 'yes'
  rule_message: Left side bikelane
bike_lane_separation13:
  LTS: 0
  condition: (`cycleway:right` != 'yes') & (`cycleway:[left]` == 'track') & (`oneway` == True) & (`cycleway:left:oneway` != '-1')
  bike_lane_separation: 'no'
  rule_message: No contraflow lane
# bike_lane_separation5:
#   LTS: 1
#   condition: (`cycleway` == 'separate')
#   bike_lane_separation: 'yes'
#   rule_message: Separated path because cycleway='separate'
bike_lane_separation20:
  LTS: 1
  condition: (`cycleway:[both,left,right]` == 'track')
  bike_lane_separation: 'yes'
  rule_message: Separated path because cycleway:*='track'
# bike_lane_separation9:
#   LTS: 1
#   condition: (`cycleway:[both,left,right]` == 'separate')
#   bike_lane_separation: 'yes'
#   rule_message: Separated path because cycleway:*='separate'


# Parking - parking_present()
parking1:
  condition: (`parking:[both,left,right]` == 'no')
  parking: 'no'
  rule_message: Parking not allowed
parking2:
  condition: (`parking:[both,left,right]` == 'lane')
  parking: 'yes'
  rule_message: Parking lane
parking3:
  condition: (`parking:[both,left,right]` == 'street_side')
  parking: 'yes'
  rule_message: Parking allowed on street side
parking4:
  condition: (`parking:[both,left,right]` == 'separate')
  parking: 'yes'
  rule_message: Parking separately mapped
parking5:
  condition: (`parking:[both,left,right]:orientation` == 'parallel')
  parking: 'yes'
  rule_message: Parallel parking
parking6:
  condition: (`parking:condition:[both,left,right]` == 'no_parking')
  parking: 'no'
  rule_message: Parking not allowed
parking7:
  condition: (`parking:condition:[both,left,right]` == 'no_stopping')
  parking: 'no'
  rule_message: Stopping not allowed
parking8:
  condition: (`parking:lane:[both,left,right]` == 'no')
  parking: 'no'
  rule_message: Parking not allowed
parking9:
  condition: (`parking:lane:[both,left,right]` == 'no_stopping')
  parking: 'no'
  rule_message: Stopping not allowed
parking10:
  condition: (`parking:lane:[both,left,right]` == 'parallel')
  parking: 'yes'
  rule_message: Parallel parking
parking11:
  condition: (`parking:condition:[both,left,right]` == 'ticket;residents')
  parking: 'yes'
  rule_message: Resident parking

# Prevailing Speed (mph) - get_max_speed()
# Assumed speeds are worst in Cambridge - FIXME use larger region
speed1:
  condition: (`highway` == 'primary')
  speed: 50
  rule_message: Assumed
speed2:
  condition: (`highway` == 'primary_link')
  speed: 35
  rule_message: Assumed
speed3:
  condition: (`highway` == 'trunk')
  speed: 50
  rule_message: Assumed
speed4:
  condition: (`highway` == 'trunk_link')
  speed: 50
  rule_message: Assumed
speed5:
  condition: (`highway` == 'secondary')
  speed: 35
  rule_message: Assumed
speed6:
  condition: (`highway` == 'residential')
  speed: 25
  rule_message: Assumed
speed7:
  condition: (`highway` == 'footway')
  speed: 15
  rule_message: Assumed
speed8:
  condition: (`highway` == 'unclassified')
  speed: 40
  rule_message: Assumed
speed9:
  condition: (`highway` == 'service')
  speed: 30
  rule_message: Assumed
speed10:
  condition: (`highway` == 'tertiary')
  speed: 25
  rule_message: Assumed
speed11:
  condition: (`highway` == 'tertiary_link')
  speed: 25
  rule_message: Assumed
speed12:
  condition: (`highway` == 'living_street')
  speed: 25
  rule_message: Assumed

# Centerlines - get_centerlines()
# Should this be combined with speed assumptions?
centerline1:
  condition: (`lane_markings` == 'yes')
  centerline: 'yes'
  rule_message: Has centerline due to lane_markings=yes
centerline2:
  condition: (`lane_markings` == 'no')
  centerline: 'no'
  rule_message: Doesn't have centerline due to lane_markings=no
centerline3:
  condition: (`highway` == 'primary')
  centerline: 'yes'
  rule_message: Assumed
centerline4:
  condition: (`highway` == 'primary_link')
  centerline: 'yes'
  rule_message: Assumed
centerline5:
  condition: (`highway` == 'trunk')
  centerline: 'yes'
  rule_message: Assumed
centerline6:
  condition: (`highway` == 'trunk_link')
  centerline: 'yes'
  rule_message: Assumed
centerline7:
  condition: (`highway` == 'secondary')
  centerline: 'yes'
  rule_message: Assumed
centerline8:
  condition: (`highway` == 'residential')
  centerline: 'no'
  rule_message: Assumed
centerline9:
  condition: (`highway` == 'footway')
  centerline: 'no'
  rule_message: Assumed
centerline10:
  condition: (`highway` == 'unclassified')
  centerline: 'no'
  rule_message: Assumed
centerline11:
  condition: (`highway` == 'service')
  centerline: 'no'
  rule_message: Assumed
centerline12:
  condition: (`highway` == 'tertiary')
  centerline: 'no'
  rule_message: Assumed
centerline13:
  condition: (`highway` == 'tertiary_link')
  centerline: 'no'
  rule_message: Assumed
centerline14:
  condition: (`highway` == 'living_street')
  centerline: 'no'
  rule_message: Assumed

# Average Daily Traffic - get_adt()
# Assumptions are based on an email for Prof. Furth
ADT10:
  condition: (`highway` == 'footway')
  ADT: 10
  rule_message: Assumed
ADT20:
  condition: (`highway` == 'service')
  ADT: 100
  rule_message: Assumed
ADT30:
  condition: (`highway` == 'primary')
  ADT: 3001
  rule_message: Assumed
ADT31:
  condition: (`highway` == 'primary_link')
  ADT: 3001
  rule_message: Assumed
ADT40:
  condition: (`lane_count` >= 3)
  ADT: 8001
  rule_message: Traffic is high on large roads
ADT50:
  condition: (`lane_count` == 2) & (`centerline` == 'yes')
  ADT: 1501
  rule_message: Assumed - Centerline
  # Why would there be a centerline unless traffic is high?
ADT60:
  condition: (`lane_count` == 2) & (`centerline` == 'no') & (`highway` == 'residential')
  ADT: 749
  rule_message: Assumed - Unlaned residential has low traffic
ADT70:
  condition: (`lane_count` == 2) & (`centerline` == 'no')
  ADT: 3001
  rule_message: Assumed - Unlaned non-residential has moderate traffic
ADT80:
  condition: (`lane_count` == 1) & (`highway` == 'residential') & (`oneway` == True) 
  ADT: 599
  rule_message: Assumed - Oneway residential has low traffic
ADT90:
  condition: (`lane_count` == 1) & (`oneway` == True) 
  ADT: 1001
  rule_message: Assumed - Oneway non-residential has moderate traffic
ADT100:
  condition: (`lane_count` == 1) & (`highway` == 'residential')
  ADT: 599
  rule_message: Assumed - 2 way, 1 lane residential has low traffic
