# Bike Lanes - is_bike_lane()
bike_lane_exist1:
  condition: (`cycleway` == 'lane')
  bike_lane_exist: 'yes'
  rule_message: Bike lane because cycleway='lane'
bike_lane_exist2:
  condition: (`cycleway:both` == 'lane')
  bike_lane_exist: 'yes'
  rule_message: Bike lane because cycleway:both='lane'
bike_lane_exist3:
  condition: (`cycleway:left` == 'lane')
  bike_lane_exist: 'left:yes'
  rule_message: Left bike lane because cycleway:left='lane'
bike_lane_exist4:
  condition: (`cycleway:right` == 'lane')
  bike_lane_exist: 'right:yes'
  rule_message: Right bike lane because cycleway:right='lane'
# bike_lane_exist5:
#   condition: (`shoulder:access:bicycle` == 'lane')
#   bike_lane_exist: 'yes'
#   rule_message: Bike lane because 'shoulder:access:bicycle'='yes'.



# Biking Permitted Rules - biking_permitted()
biking_permitted1:
  LTS: 0
  condition: (`bicycle` == 'dismount')
  biking_permitted: 'no' # FUTURE classify dismount separately to include in some analyses specially
  rule_message: Cyclists must dismount
biking_permitted2:
  LTS: 0
  condition: (`bicycle` == 'no')
  biking_permitted: 'no'
  rule_message: Cycling explicitly excluded
biking_permitted3:
  LTS: 0
  condition: (`highway` == 'motorway')
  biking_permitted: 'no'
  rule_message: "Assume: highway='motorway'"
biking_permitted4:
  LTS: 0
  condition: (`highway` == 'motorway_link')
  biking_permitted: 'no'
  rule_message: "Assume: highway='motorway_link'"
biking_permitted5:
  LTS: 0
  condition: (`access` == 'no')
  biking_permitted: 'no'
  rule_message: No access
biking_permitted6:
  LTS: 0
  condition: (`highway` == 'proposed')
  biking_permitted: 'no'
  rule_message:  "Assume: highway='proposed'"
biking_permitted7:
  LTS: 0
  condition: (`footway` == 'sidewalk') & (`bicycle` != 'yes') & (`highway` == 'footway')
  biking_permitted: 'no'
  rule_message: Cycling not permitted. When footway="sidewalk" is present, there must be a bicycle="yes" when the highway is "footway" or "path".
biking_permitted8:
  LTS: 0
  condition: (`footway` == 'sidewalk') & (`bicycle` != 'yes') & (`highway` == 'path')
  biking_permitted: 'no'
  rule_message: Cycling not permitted. When footway="sidewalk" is present, there must be a bicycle="yes" when the highway is "footway" or "path".
# Moved from mixed_traffic
# biking_permitted:
#   LTS: 1
#   condition: highway = 'pedestrian'
#   rule_message: Setting LTS to 1 because highway='pedestrian'.
# biking_permitted:
#   LTS: 1
#   condition: motor_vehicle == 'no'
#   rule_message: Setting LTS to 1 because motor_vehicle='no'.

biking_permitted9:
  LTS: 2
  condition: (highway == 'service') & (service == 'alley')
  biking_permitted: 'yes'
  rule_message: Service alley
biking_permitted10:
  LTS: 2
  condition: (highway == 'service') & (service == 'driveway')
  biking_permitted: 'yes'
  rule_message: Driveway
biking_permitted11:
  LTS: 2
  condition: (highway == 'service')
  biking_permitted: 'yes'
  rule_message: Service road
# biking_permitted:
#   LTS: 2
#   condition: highway = 'footway' & footway == 'crossing'
#   rule_message: Setting LTS to 2 because highway='footway' and footway='crossing'.

# biking_permitted:
#   LTS: 2
#   condition: highway == 'track'
#   rule_message: Setting LTS to 2 because highway='track'.

# Separated Paths - is_separated_path()
bike_lane_separation1:
  LTS: 1
  condition: highway == 'cycleway'
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='cycleway'
bike_lane_separation2:
  LTS: 1
  condition: highway == 'path'
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='path'
bike_lane_separation3:
  LTS: 1
  condition: highway == 'footway' & ~(footway== 'crossing')
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='footway' but isn't a crossing
bike_lane_separation4:
  LTS: 1
  condition: (`cycleway` == 'track')
  bike_lane_separation: 'yes'
  rule_message: Separated path because cycleway='track'
# bike_lane_separation5:
#   LTS: 1
#   condition: (`cycleway` == 'separate')
#   bike_lane_separation: 'yes'
#   rule_message: Separated path because cycleway='separate'
# bike_lane_separation6:
#   LTS: 1
#   condition: (`cycleway:both` == 'separate')
#   bike_lane_separation: 'yes'
#   rule_message: Separated path because cycleway:both='separate'
# bike_lane_separation7:
#   LTS: 1
#   condition: (`cycleway:both:lane` == 'exclusive')
#   bike_lane_separation: 'yes'
#   rule_message: Separated path because cycleway:both:lane='exclusive'

bike_lane_separation8:
  LTS: 1
  condition: (`cycleway:right` == 'track')
  bike_lane_separation: right:yes
  rule_message: Separated path because cycleway:right='track'
# bike_lane_separation9:
#   LTS: 1
#   condition: (`cycleway:right` == 'separate')
#   bike_lane_separation: right:yes
#   rule_message: Separated path because cycleway:right='separate'

bike_lane_separation10:
  LTS: 1
  condition: (`cycleway:left` == 'track')
  bike_lane_separation: left:yes
  rule_message: Separated path because cycleway:left='track'
# bike_lane_separation11:
#   LTS: 1
#   condition: (`cycleway:left` == 'separate')
#   bike_lane_separation: left:yes
#   rule_message: Separated path because cycleway:left='separate'

# bike_lane_separation12:
#   LTS: 1
#   condition: (`cycleway:right:lane` == 'exclusive')
#   bike_lane_separation: right:yes
#   rule_message: Separated path because cycleway:right:lane='exclusive'
# bike_lane_separation13:
#   LTS: 1
#   condition: (`cycleway:left:lane` == 'exclusive')
#   bike_lane_separation: left:yes
#   rule_message: Separated path because cycleway:left:lane='exclusive'

# Parking - parking_present()
parking1:
  condition: (`parking:both` == 'no')
  parking: 'no'
  rule_message: Parking not allowed on either side
parking2:
  condition: (`parking:both` == 'lane')
  parking: 'yes'
  rule_message: Parking allowed on both sides
parking3:
  condition: (`parking:both` == 'street_side')
  parking: 'yes'
  rule_message: Parking allowed on both sides
parking4:
  condition: (`parking:both` == 'separate')
  parking: 'yes'
  rule_message: Parking separately mapped on both sides
parking5:
  condition: (`parking:both:orientation` == 'parallel')
  parking: 'yes'
  rule_message: Parallel parking on both sides
parking6:
  condition: (`parking:condition:both` == 'no_parking')
  parking: 'no'
  rule_message: Parking not allowed on either side
parking7:
  condition: (`parking:condition:both` == 'no_stopping')
  parking: 'no'
  rule_message: Stopping not allowed on either side
parking8:
  condition: (`parking:lane:both` == 'no')
  parking: 'no'
  rule_message: Parking not allowed on either side
parking9:
  condition: (`parking:lane:both` == 'no_stopping')
  parking: 'no'
  rule_message: Stopping not allowed on either side
parking10:
  condition: (`parking:lane:both` == 'parallel')
  parking: 'yes'
  rule_message: Parallel parking on both sides
parking11:
  condition: (`parking:condition:both` == 'ticket;residents')
  parking: 'yes'
  rule_message: Resident parking on both sides

parking21:
  condition: (`parking:left` == 'no')
  parking: 'left:no'
  rule_message: Parking not allowed on the left
parking22:
  condition: (`parking:left` == 'lane')
  parking: 'left:yes'
  rule_message: Parking allowed on the left
parking23:
  condition: (`parking:left` == 'street_side')
  parking: 'left:yes'
  rule_message: Parking allowed on the left
parking24:
  condition: (`parking:left` == 'separate')
  parking: 'left:yes'
  rule_message: Parking separately mapped on the left
parking25:
  condition: (`parking:left:orientation` == 'parallel')
  parking: 'left:yes'
  rule_message: Parallel parking on the left
parking26:
  condition: (`parking:condition:left` == 'no_parking')
  parking: 'left:no'
  rule_message: Parking not allowed on the left
parking27:
  condition: (`parking:condition:left` == 'no_stopping')
  parking: 'left:no'
  rule_message: Stopping not allowed on the left
parking28:
  condition: (`parking:lane:left` == 'no')
  parking: 'left:no'
  rule_message: Parking not allowed on the left
parking29:
  condition: (`parking:lane:left` == 'no_stopping')
  parking: 'left:no'
  rule_message: Stopping not allowed on the left
parking30:
  condition: (`parking:lane:left` == 'parallel')
  parking: 'left:yes'
  rule_message: Parallel parking on the left
parking31:
  condition: (`parking:condition:left` == 'ticket;residents')
  parking: 'left:yes'
  rule_message: Resident parking on the left

parking41:
  condition: (`parking:right` == 'no')
  parking: 'right:no'
  rule_message: Parking not allowed on the right
parking42:
  condition: (`parking:right` == 'lane')
  parking: 'right:yes'
  rule_message: Parking allowed on the right
parking43:
  condition: (`parking:right` == 'street_side')
  parking: 'right:yes'
  rule_message: Parking allowed on the right
parking44:
  condition: (`parking:right` == 'separate')
  parking: 'right:yes'
  rule_message: Parking separately mapped on the right
parking45:
  condition: (`parking:right:orientation` == 'parallel')
  parking: 'right:yes'
  rule_message: Parallel parking on the right
parking46:
  condition: (`parking:condition:right` == 'no_parking')
  parking: 'right:no'
  rule_message: Parking not allowed on the right
parking47:
  condition: (`parking:condition:right` == 'no_stopping')
  parking: 'right:no'
  rule_message: Stopping not allowed on the right
parking48:
  condition: (`parking:lane:right` == 'no')
  parking: 'right:no'
  rule_message: Parking not allowed on the right
parking49:
  condition: (`parking:lane:right` == 'no_stopping')
  parking: 'right:no'
  rule_message: Stopping not allowed on the right
parking50:
  condition: (`parking:lane:right` == 'parallel')
  parking: 'right:yes'
  rule_message: Parallel parking on the right
parking51:
  condition: (`parking:condition:right` == 'ticket;residents')
  parking: 'right:yes'
  rule_message: Resident parking on the right

# Prevailing Speed (mph) - get_max_speed()
# Assumed speeds are worst in Cambridge - FIXME use larger region
speed1:
  condition: (`highway` == 'primary')
  speed: 50
  rule_message:  "Assume: 'highway'='primary'"
speed2:
  condition: (`highway` == 'primary_link')
  speed: 35
  rule_message:  "Assume: 'highway'='primary_link'"
speed3:
  condition: (`highway` == 'trunk')
  speed: 50
  rule_message:  "Assume: 'highway'='trunk'"
speed4:
  condition: (`highway` == 'trunk_link')
  speed: 50
  rule_message:  "Assume: 'highway'='trunk_link'"
speed5:
  condition: (`highway` == 'secondary')
  speed: 35
  rule_message:  "Assume: 'highway'='secondary'"
speed6:
  condition: (`highway` == 'residential')
  speed: 25
  rule_message:  "Assume: 'highway'='secondary'"
speed7:
  condition: (`highway` == 'footway')
  speed: 15
  rule_message:  "Assume: 'highway'='footway'"
speed8:
  condition: (`highway` == 'unclassified')
  speed: 40
  rule_message:  "Assume: 'highway'='unclassified'"
speed9:
  condition: (`highway` == 'service')
  speed: 30
  rule_message:  "Assume: 'highway'='service'"
speed10:
  condition: (`highway` == 'tertiary')
  speed: 25
  rule_message:  "Assume: 'highway'='tertiary'"
speed11:
  condition: (`highway` == 'tertiary_link')
  speed: 25
  rule_message:  "Assume: 'highway'='tertiary_link'"
speed12:
  condition: (`highway` == 'living_street')
  speed: 25
  rule_message:  "Assume: 'highway'='living_street'"

# Centerlines - get_centerlines()
# Should this be combined with speed assumptions?
centerline1:
  condition: (`lane_markings` == 'yes')
  centerline: 'yes'
  rule_message: Has centerline due to lane_markings=yes
centerline2:
  condition: (`lane_markings` == 'no')
  centerline: 'no'
  rule_message: Doesn't have centerline due to lane_markings=no
centerline3:
  condition: (`highway` == 'primary')
  centerline: 'yes'
  rule_message:  "Assume: 'highway'='primary'"
centerline4:
  condition: (`highway` == 'primary_link')
  centerline: 'yes'
  rule_message:  "Assume: 'highway'='primary_link'"
centerline5:
  condition: (`highway` == 'trunk')
  centerline: 'yes'
  rule_message:  "Assume: 'highway'='trunk'"
centerline6:
  condition: (`highway` == 'trunk_link')
  centerline: 'yes'
  rule_message:  "Assume: 'highway'='trunk_link'"
centerline7:
  condition: (`highway` == 'secondary')
  centerline: 'yes'
  rule_message:  "Assume: 'highway'='secondary'"
centerline8:
  condition: (`highway` == 'residential')
  centerline: 'no'
  rule_message:  "Assume: 'highway'='residential'"
centerline9:
  condition: (`highway` == 'footway')
  centerline: 'no'
  rule_message:  "Assume: 'highway'='footway'"
centerline10:
  condition: (`highway` == 'unclassified')
  centerline: 'no'
  rule_message:  "Assume: 'highway'='unclassified'"
centerline11:
  condition: (`highway` == 'service')
  centerline: 'no'
  rule_message:  "Assume: 'highway'='service'"
centerline12:
  condition: (`highway` == 'tertiary')
  centerline: 'no'
  rule_message:  "Assume: 'highway'='tertiary'"
centerline13:
  condition: (`highway` == 'tertiary_link')
  centerline: 'no'
  rule_message:  "Assume: 'highway'='tertiary_link'"
centerline14:
  condition: (`highway` == 'living_street')
  centerline: 'no'
  rule_message:  "Assume: 'highway'='living_street'"

# Average Daily Traffic - get_adt()
# Assumptions are based on an email for Prof. Furth
ADT1:
  condition: (`lane_count` >= 3)
  ADT: 8001
  rule_message: Traffic is high on large roads
ADT2:
  condition: (`lane_count` == 2) & (`centerline` == 'yes')
  ADT: 1501
  rule_message: Why would there be a centerline unless traffic is high?
ADT3:
  condition: (`lane_count` == 2) & (`centerline` == 'no') & (`highway` == 'residential')
  ADT: 749
  rule_message: Unlaned residential has low traffic
ADT4:
  condition: (`lane_count` == 2) & (`centerline` == 'no')
  ADT: 3001
  rule_message: Unlaned non-residential has moderate traffic
ADT5:
  condition: (`lane_count` == 1) & (`highway` == 'residential') & (`oneway` == 'yes') 
  ADT: 599
  rule_message: Oneway residential has low traffic
ADT6:
  condition: (`lane_count` == 1) & (`oneway` == 'yes') 
  ADT: 1001
  rule_message: Oneway non-residential has moderate traffic
ADT7:
  condition: (`lane_count` == 1) & (`highway` == 'residential')
  ADT: 599
  rule_message: 2 way, 1 lane residential has low traffic
ADT8:
  condition: (`highway` == 'footway')
  ADT: 10
  rule_message:  "Assume: 'highway'='footway'"
ADT9:
  condition: (`highway` == 'service')
  ADT: 500
  rule_message:  "Assume: 'highway'='service'"

# ADT1:
#   condition: (`highway` == 'primary')
#   ADT: 1500
#   rule_message: Assume ADT of 50 where 'highway'='primary'
# ADT2:
#   condition: (`highway` == 'primary_link')
#   ADT: 1500
#   rule_message: Assume ADT of 50 where 'highway'='primary_link'
# ADT3:
#   condition: (`highway` == 'trunk')
#   ADT: 1500
#   rule_message: Assume ADT of 50 where 'highway'='trunk'
# ADT4:
#   condition: (`highway` == 'trunk_link')
#   ADT: 1500
#   rule_message: Assume ADT of 50 where 'highway'='trunk_link'
# ADT5:
#   condition: (`highway` == 'secondary')
#   ADT: 1500
#   rule_message: Assume ADT of 35 where 'highway'='secondary'
# ADT6:
#   condition: (`highway` == 'residential')
#   ADT: 1500
#   rule_message: Assume ADT of 25 where 'highway'='secondary'
# ADT8:
#   condition: (`highway` == 'unclassified')
#   ADT: 1500
#   rule_message: Assume ADT of 40 where 'highway'='unclassified'
# ADT10:
#   condition: (`highway` == 'tertiary')
#   ADT: 1500
#   rule_message: Assume ADT of 25 where 'highway'='tertiary'
# ADT11:
#   condition: (`highway` == 'tertiary_link')
#   ADT: 1500
#   rule_message: Assume ADT of 25 where 'highway'='tertiary_link'
# ADT12:
#   condition: (`highway` == 'living_street')
#   ADT: 1500
#   rule_message: Assume ADT of 25 where 'highway'='living_street'