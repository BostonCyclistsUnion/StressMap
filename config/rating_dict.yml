# Bike Lanes - is_bike_lane()
a1:
  condition: (`cycleway` == 'lane')
  bike_lane: 'yes'
  rule_message: Bike lane because cycleway='lane'.
a2:
  condition: (`cycleway:both` == 'lane')
  bike_lane: 'yes'
  rule_message: Bike lane because cycleway:both='lane'.
a3:
  condition: (`cycleway:left` == 'lane')
  bike_lane: 'left:yes'
  rule_message: Left bike lane because cycleway:left='lane'.
a4:
  condition: (`cycleway:right` == 'lane')
  bike_lane: 'right:yes'
  rule_message: Right bike lane because cycleway:right='lane'.
# a5:
#   condition: (`shoulder:access:bicycle` == 'lane')
#   bike_lane: 'yes'
#   rule_message: Bike lane because 'shoulder:access:bicycle'='yes'.


# Bike Lanes - bike_lane_analysis_with_parking()
b1: # Fix Speed
  LTS: 1
  rule_message: LTS is 1 because there is parking present, the maxspeed is less than
    or equal to 40, highway="residential", and there are 2 lanes or less.
  simple_message: bike lane w/ parking, $\leq$ 40 km/h, highway $=$ "residential",
    $\leq$ 2 lanes
b2:
  LTS: 3
  rule_message: Increasing LTS to 3 because there are 3 or more lanes and parking
    present.
  simple_message: bike lane w/ parking, 3 or more lanes
b3:
  LTS: 3
  rule_message: Increasing LTS to 3 because the bike lane width is less than 4.1m
    and parking present.
  simple_message: bike lane width $<$ 4.1m, parking
b4:
  LTS: 2
  rule_message: Increasing LTS to 2 because the bike lane width is less than 4.25m
    and parking present.
  simple_message: bike lane width $<$ 4.25m, parking
b5: # Fix Speed
  LTS: 2
  rule_message: Increasing LTS to 2 because the bike lane width is less than 4.5m,
    maxspeed is less than 40 on a residential street and parking present.
  simple_message: bike lane width $<$ 4.5m, $\leq$ 40 km/h, residential, parking
b6: # Fix Speed
  LTS: 2
  rule_message: Increasing LTS to 2 because the maxspeed is between 41-50 km/h and
    parking present.
  simple_message: bike lane w/ parking, speed 41-50 km/h
b7: # Fix Speed
  LTS: 3
  rule_message: Increasing LTS to 3 because the maxspeed is between 51-54 km/h and
    parking present.
  simple_message: bike lane w/ parking, speed 51-54 km/h
b8: # Fix Speed
  LTS: 4
  rule_message: Increasing LTS to 4 because the maxspeed is over 55 km/h and parking
    present.
  simple_message: bike lane w/ parking, speed $>$ 55 km/h
b9:
  LTS: 3
  rule_message: Increasing LTS to 3 because highway is not 'residential'.
  simple_message: bike lane w/ parking, highway $\neq$ "residential"

# Bike lanes with no parking - bike_lane_analysis_no_parking()
c1: # Fix Speed
  LTS: 1
  rule_message: LTS is 1 because there is no parking, maxspeed is less than or equal
    to 50, highway='residential', and there are 2 lanes or less.
  simple_message: bike lane no parking, $\leq$ 50 km/h, highway $=$ "residential",
    $\leq$ 2 lanes
c3: # Fix Speed
  LTS: 3
  condition: (lanes_assumed >= 3) & (maxspeed_assumed <= @ref['s5'][unit])
  rule_message: Increasing LTS to 3 because there are 3 or more lanes and no parking.
  simple_message: bike lane no parking, $\leq$ 65 km/h, $\geq$ 3 lanes
c4:
  LTS: 2
  condition: #(gdf_edges[['width']].map(lambda x: isinstance(x, float))['width']) & (gdf_edges['width'] <= ref['w1'][unit])
  rule_message: Increasing LTS to 2 because the bike lane width is less than 1.7 metres
    and no parking.
  simple_message: bike lane width $<$ 1.7m, no parking
c5: # Fix Speed
  LTS: 3
  condition: (maxspeed_assumed > @ref['s3'][unit]) & (maxspeed_assumed <= @ref['s5'][unit])
  rule_message: Increasing LTS to 3 because the maxspeed is between 51-64 km/h and
    no parking.
  simple_message: bike lane no parking, speed 51-64 km/h
c6: # Fix Speed
  LTS: 4
  condition: maxspeed_assumed > @ref['s5'][unit]
  rule_message: Increasing LTS to 4 because the maxspeed is over 65 km/h and no parking.
  simple_message: bike lane no parking, speed $>$ 65 km/h
c7:
  LTS: 3
  condition: highway != 'residential'
  rule_message: Increasing LTS to 3 because highway with bike lane is not 'residential'
    and no parking.
  simple_message: bike lane no parking, highway $\neq$ "residential"

# Mixed Traffic - mixed_traffic()
m2:
  LTS: 2
  condition: highway == 'service' & service == 'alley'
  rule_message: Setting LTS to 2 because highway='service' and service='alley'.
  simple_message: mixed traffic, highway $=$ "service", service $=$ "alley"
m3: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s3'][unit] & highway == 'service' & service == 'parking_aisle'
  rule_message: Setting LTS to 2 because maxspeed is 50 km/h or less and service is
    'parking_aisle'.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, service $=$ "parking_aisle"
m4: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s3'][unit] & highway == 'service' & service == 'driveway'
  rule_message: Setting LTS to 2 because maxspeed is 50 km/h or less and service is
    'driveway'.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, service $=$ "driveway"
m5: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s2'][unit] & lanes_assumed <= 3 & highway == 'residential'
  rule_message: Setting LTS to 2 because maxspeed is up to 40 km/h, 3 or fewer lanes
    and highway='residential'.
  simple_message: mixed traffic, speed $\leq$ 40 km/h, highway $=$ "residential",
    $\leq$ 3 lanes
m6: # Fix Speed
  LTS: 3
  condition: maxspeed_assumed <= @ref['s2'][unit] & lanes_assumed <= 3
  rule_message: Setting LTS to 3 because maxspeed is up to 40 km/h and 3 or fewer
    lanes on non-residential highway.
  simple_message: mixed traffic, speed $\leq$ 40 km/h, highway $\neq$ "residential",
    $\leq$ 3 lanes
m7: # Fix Speed
  LTS: 3
  condition: maxspeed_assumed <= @ref['s2'][unit] & lanes_assumed <= 5
  rule_message: Setting LTS to 3 because maxspeed is up to 40 km/h and 4 or 5 lanes.
  simple_message: mixed traffic, speed $\leq$ 40 km/h, 4 or 5 lanes
m8: # Fix Speed
  LTS: 4
  condition: maxspeed_assumed <= @ref['s2'][unit] & lanes_assumed > 5
  rule_message: Setting LTS to 4 because maxspeed is up to 40 km/h and the number
    of lanes is greater than 5.
  simple_message: mixed traffic, speed $\leq$ 40 km/h, lanes $>$ 5
m9: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s3'][unit] & lanes_assumed < 3 & highway == 'residential'
  rule_message: Setting LTS to 2 because maxspeed is up to 50 km/h and lanes are 2
    or less and highway='residential'.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, highway $=$ "residential",$\leq$
    2 lanes
m10: # Fix Speed
  LTS: 3
  condition: maxspeed_assumed <= @ref['s3'][unit] & lanes_assumed <= 3
  rule_message: Setting LTS to 3 because maxspeed is up to 50 km/h and lanes are 3
    or less on non-residential highway.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, highway $\neq$ "residential",
    $\leq$ 3 lanes
m11: # Fix Speed
  LTS: 4
  condition: maxspeed_assumed <= @ref['s3'][unit] & lanes_assumed > 3
  rule_message: Setting LTS to 4 because the number of lanes is greater than 3.
  simple_message: mixed traffic, speed $\leq$ 50 km/h, lanes $>$ 3
m12: # Fix Speed
  LTS: 4
  condition: maxspeed_assumed > @ref['s3'][unit]
  rule_message: Setting LTS to 4 because maxspeed is greater than 50 km/h.
  simple_message: mixed traffic, speed $>$ 50 km/h
m13:
  LTS: 1
  condition: highway = 'pedestrian'
  rule_message: Setting LTS to 1 because highway='pedestrian'.
  simple_message: mixed traffic, highway $=$ "pedestrian"
m14:
  LTS: 2
  condition: highway = 'footway' & footway == 'crossing'
  rule_message: Setting LTS to 2 because highway='footway' and footway='crossing'.
  simple_message: mixed traffic, highway $=$ "footway", footway $=$ "crossing"
m15:
  LTS: 2
  condition: highway == 'track'
  rule_message: Setting LTS to 2 because highway='track'.
  simple_message: mixed traffic, highway $=$ "track"
m16: # Fix Speed
  LTS: 2
  condition: maxspeed_assumed <= @ref['s1'][unit] & highway == 'service'
  rule_message: Setting LTS to 2 because maxspeed is less than 35 km/h and highway='service'.
  simple_message: mixed traffic, speed $\leq$ 35 km/h, highway $=$ "service"
m17:
  LTS: 1
  condition: motor_vehicle == 'no'
  rule_message: Setting LTS to 1 because motor_vehicle='no'.
  simple_message: mixed traffic, motor_vehicle $=$ "no"

# Biking Permitted Rules - biking_permitted()
p1:
  LTS: 0
  condition: bicycle == 'dismount'
  biking_permitted: dismount
p2:
  LTS: 0
  condition: bicycle == 'no'
  biking_permitted: no
  rule_message: Cycling not permitted due to bicycle='no' tag.
p3:
  LTS: 0
  condition: highway == 'motorway'
  biking_permitted: no
  rule_message: Cycling not permitted due to highway='motorway' tag.
p4:
  LTS: 0
  condition: highway == 'motorway_link'
  biking_permitted: no
  rule_message: Cycling not permitted due to highway='motorway_link' tag.
p5: # Complex condition, should split?
  LTS: 0
  condition: footway == 'sidewalk' & ~(bicycle == 'yes') & (highway == 'footway' | highway == 'path')
  biking_permitted: no
  rule_message: Cycling not permitted. When footway="sidewalk" is present, there must
    be a bicycle="yes" when the highway is "footway" or "path".
p6:
  LTS: 0
  condition: access == 'no'
  biking_permitted: no
  rule_message: Cycling not permitted due to access='no' tag.
p7:
  LTS: 0
  condition: highway == 'proposed'
  biking_permitted: no
  rule_message: Cycling not permitted due to highway='proposed' tag.

# Separated Paths - is_separated_path()
s1:
  LTS: 1
  condition: highway == 'cycleway'
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='cycleway'.
s2:
  LTS: 1
  condition: highway == 'path'
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='path'.
s3:
  LTS: 1
  condition: highway == 'footway' & ~(footway== 'crossing')
  bike_lane_separation: 'yes'
  rule_message: Separated path because highway='footway' but it is not a crossing.
s4:
  LTS: 1
  condition: (`cycleway` == 'track')
  bike_lane_separation: 'yes'
  rule_message: Separated path because cycleway='track'.
s5:
  LTS: 1
  condition: (`cycleway` == 'separate')
  bike_lane_separation: 'yes'
  rule_message: Separated path because cycleway='separate'.
s6:
  LTS: 1
  condition: (`cycleway:both` == 'separate')
  bike_lane_separation: 'yes'
  rule_message: Separated path because cycleway:both='separate'.
# s7:
#   LTS: 1
#   condition: (`cycleway:both:lane` == 'exclusive')
#   bike_lane_separation: 'yes'
#   rule_message: Separated path because cycleway:both:lane='exclusive'.

s8:
  LTS: 1
  condition: (`cycleway:right` == 'track')
  bike_lane_separation: right:yes
  rule_message: Separated path because cycleway:right='track'.
s9:
  LTS: 1
  condition: (`cycleway:right` == 'separate')
  bike_lane_separation: right:yes
  rule_message: Separated path because cycleway:right='separate'.

s10:
  LTS: 1
  condition: (`cycleway:left` == 'track')
  bike_lane_separation: left:yes
  rule_message: Separated path because cycleway:left='track'.
s11:
  LTS: 1
  condition: (`cycleway:left` == 'separate')
  bike_lane_separation: left:yes
  rule_message: Separated path because cycleway:left='separate'.

# s12:
#   LTS: 1
#   condition: (`cycleway:right:lane` == 'exclusive')
#   bike_lane_separation: right:yes
#   rule_message: Separated path because cycleway:right:lane='exclusive'.
# s13:
#   LTS: 1
#   condition: (`cycleway:left:lane` == 'exclusive')
#   bike_lane_separation: left:yes
#   rule_message: Separated path because cycleway:left:lane='exclusive'.

# Parking - parking_present()
parking1:
  condition: (`parking:both` == 'no')
  parking: 'no'
  rule_message: Parking not allowed on either side.
parking2:
  condition: (`parking:both` == 'lane')
  parking: 'yes'
  rule_message: Parking allowed on both sides.
parking3:
  condition: (`parking:both` == 'street_side')
  parking: 'yes'
  rule_message: Parking allowed on both sides.
parking4:
  condition: (`parking:both` == 'separate')
  parking: 'yes'
  rule_message: Parking separately mapped on both sides.
parking5:
  condition: (`parking:both:orientation` == 'parallel')
  parking: 'yes'
  rule_message: Parallel parking on both sides.
parking6:
  condition: (`parking:condition:both` == 'no_parking')
  parking: 'no'
  rule_message: Parking not allowed on either side.
parking7:
  condition: (`parking:condition:both` == 'no_stopping')
  parking: 'no'
  rule_message: Stopping not allowed on either side.
parking8:
  condition: (`parking:lane:both` == 'no')
  parking: 'no'
  rule_message: Parking not allowed on either side.
parking9:
  condition: (`parking:lane:both` == 'no_stopping')
  parking: 'no'
  rule_message: Stopping not allowed on either side.
parking10:
  condition: (`parking:lane:both` == 'parallel')
  parking: 'yes'
  rule_message: Parallel parking on both sides.
parking11:
  condition: (`parking:condition:both` == 'ticket;residents')
  parking: 'yes'
  rule_message: Resident parking on both sides.

parking21:
  condition: (`parking:left` == 'no')
  parking: 'left:no'
  rule_message: Parking not allowed on the left.
parking22:
  condition: (`parking:left` == 'lane')
  parking: 'left:yes'
  rule_message: Parking allowed on the left.
parking23:
  condition: (`parking:left` == 'street_side')
  parking: 'left:yes'
  rule_message: Parking allowed on the left.
parking24:
  condition: (`parking:left` == 'separate')
  parking: 'left:yes'
  rule_message: Parking separately mapped on the left.
parking25:
  condition: (`parking:left:orientation` == 'parallel')
  parking: 'left:yes'
  rule_message: Parallel parking on the left.
parking26:
  condition: (`parking:condition:left` == 'no_parking')
  parking: 'left:no'
  rule_message: Parking not allowed on the left.
parking27:
  condition: (`parking:condition:left` == 'no_stopping')
  parking: 'left:no'
  rule_message: Stopping not allowed on the left.
parking28:
  condition: (`parking:lane:left` == 'no')
  parking: 'left:no'
  rule_message: Parking not allowed on the left.
parking29:
  condition: (`parking:lane:left` == 'no_stopping')
  parking: 'left:no'
  rule_message: Stopping not allowed on the left.
parking30:
  condition: (`parking:lane:left` == 'parallel')
  parking: 'left:yes'
  rule_message: Parallel parking on the left.
parking31:
  condition: (`parking:condition:left` == 'ticket;residents')
  parking: 'left:yes'
  rule_message: Resident parking on the left.

parking41:
  condition: (`parking:right` == 'no')
  parking: 'right:no'
  rule_message: Parking not allowed on the right.
parking42:
  condition: (`parking:right` == 'lane')
  parking: 'right:yes'
  rule_message: Parking allowed on the right.
parking43:
  condition: (`parking:right` == 'street_side')
  parking: 'right:yes'
  rule_message: Parking allowed on the right.
parking44:
  condition: (`parking:right` == 'separate')
  parking: 'right:yes'
  rule_message: Parking separately mapped on the right.
parking45:
  condition: (`parking:right:orientation` == 'parallel')
  parking: 'right:yes'
  rule_message: Parallel parking on the right.
parking46:
  condition: (`parking:condition:right` == 'no_parking')
  parking: 'right:no'
  rule_message: Parking not allowed on the right.
parking47:
  condition: (`parking:condition:right` == 'no_stopping')
  parking: 'right:no'
  rule_message: Stopping not allowed on the right.
parking48:
  condition: (`parking:lane:right` == 'no')
  parking: 'right:no'
  rule_message: Parking not allowed on the right.
parking49:
  condition: (`parking:lane:right` == 'no_stopping')
  parking: 'right:no'
  rule_message: Stopping not allowed on the right.
parking50:
  condition: (`parking:lane:right` == 'parallel')
  parking: 'right:yes'
  rule_message: Parallel parking on the right.
parking51:
  condition: (`parking:condition:right` == 'ticket;residents')
  parking: 'right:yes'
  rule_message: Resident parking on the right.

# Prevailing Speed (mph) - get_max_speed()
# Assumed speeds are worst in Cambridge - FIXME use larger region
speed1:
  condition: (`highway` == 'primary')
  speed: 50
  rule_message: Assume speed limit of 50 mph where 'highway'='primary'.
speed2:
  condition: (`highway` == 'primary_link')
  speed: 35
  rule_message: Assume speed limit of 50 mph where 'highway'='primary_link'.
speed3:
  condition: (`highway` == 'trunk')
  speed: 50
  rule_message: Assume speed limit of 50 mph where 'highway'='trunk'.
speed4:
  condition: (`highway` == 'trunk_link')
  speed: 50
  rule_message: Assume speed limit of 50 mph where 'highway'='trunk_link'.
speed5:
  condition: (`highway` == 'secondary')
  speed: 35
  rule_message: Assume speed limit of 35 mph where 'highway'='secondary'.
speed6:
  condition: (`highway` == 'residential')
  speed: 25
  rule_message: Assume speed limit of 25 mph where 'highway'='secondary'.
speed7:
  condition: (`highway` == 'footway')
  speed: 25
  rule_message: Assume speed limit of 25 mph where 'highway'='footway'.
speed8:
  condition: (`highway` == 'unclassified')
  speed: 40
  rule_message: Assume speed limit of 40 mph where 'highway'='unclassified'.
speed9:
  condition: (`highway` == 'service')
  speed: 30
  rule_message: Assume speed limit of 30 mph where 'highway'='service'.
speed10:
  condition: (`highway` == 'tertiary')
  speed: 25
  rule_message: Assume speed limit of 25 mph where 'highway'='tertiary'.
speed11:
  condition: (`highway` == 'tertiary_link')
  speed: 25
  rule_message: Assume speed limit of 25 mph where 'highway'='tertiary_link'.
speed12:
  condition: (`highway` == 'living_street')
  speed: 25
  rule_message: Assume speed limit of 25 mph where 'highway'='living_street'.

# Centerlines - get_centerlines()
# Should this be combined with speed assumptions?
center1:
  condition: (`lane_markings` == 'yes')
  centerline: 'yes'
  rule_message: Has centerline due to lane_markings=yes.
center2:
  condition: (`lane_markings` == 'no')
  centerline: 'no'
  rule_message: Doesn't have centerline due to lane_markings=no.
center2:
  condition: (`highway` == 'primary')
  centerline: 'yes'
  rule_message: Assume has centerline where 'highway'='primary'.
center3:
  condition: (`highway` == 'primary_link')
  centerline: 'yes'
  rule_message: Assume has centerline where 'highway'='primary_link'.
center4:
  condition: (`highway` == 'trunk')
  centerline: 'yes'
  rule_message: Assume has centerline where 'highway'='trunk'.
center5:
  condition: (`highway` == 'trunk_link')
  centerline: 'yes'
  rule_message: Assume has centerline where 'highway'='trunk_link'.
center6:
  condition: (`highway` == 'secondary')
  centerline: 'yes'
  rule_message: Assume doesn't have centerline where 'highway'='secondary'.
center7:
  condition: (`highway` == 'residential')
  centerline: 'no'
  rule_message: Assume doesn't have centerline where 'highway'='secondary'.
center8:
  condition: (`highway` == 'footway')
  centerline: 'no'
  rule_message: Assume doesn't have centerline where 'highway'='footway'.
center9:
  condition: (`highway` == 'unclassified')
  centerline: 'no'
  rule_message: Assume doesn't have centerline where 'highway'='unclassified'.
center10:
  condition: (`highway` == 'service')
  centerline: 'no'
  rule_message: Assume doesn't have centerline where 'highway'='service'.
center11:
  condition: (`highway` == 'tertiary')
  centerline: 'no'
  rule_message: Assume doesn't have centerline where 'highway'='tertiary'.
center12:
  condition: (`highway` == 'tertiary_link')
  centerline: 'no'
  rule_message: Assume doesn't have centerline where 'highway'='tertiary_link'.
center13:
  condition: (`highway` == 'living_street')
  centerline: 'no'
  rule_message: Assume doesn't have centerline where 'highway'='living_street'.
